{
  "hash": "821415e8430f54de6ab70a1d3d06a4c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ejecutando scripts de R en <code>marbec-gpu</code>\"\ndescription: |\n  Ejecutar scripts de R en <code>marbec-gpu</code>.\ndate: 2024-10-25\nformat: \n  html:\n    toc: true\n    theme: \n      light: yeti\n      dark: solar\nfig-dpi: 1000\nengine: knitr\ndraft: false\n---\n\n\n![](images/banner.jpg){width=100%}\n\nCréditos de la imagen: Андрей Сизов en [Unplash](https://unsplash.com/photos/a-book-with-a-diagram-on-it-nuz3rK5iiKg?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash)\n\n# Empezando a trabajar con `marbec-gpu`\n\n## Un poco de orden\n\n### Creando un directorio de trabajo\n\nAl igual que cuando se trabaja con RStudio de manera local (i.e. en nuestra PC), se recomienda definiendo claramente nuestro directorio de trabajo. Esto es sumamente importante porque cualquier proceso que ejecutemos (ya sea desde RStudio o Terminal) utilizará ese directorio como referencia para hallar los archivos de entrada, salida o incluso otros scripts.\n\nPara nuestro caso, hemos creado una carpeta llamada **mgpu-examples/** en donde a su vez existen las subcarpetas **code/**, **inputs/**, **outputs/** y **figures/**. La creación de carpetas en `marbec-data` puede hacerse directamente desde la interfaz web (dando click a *File station* y luego usando el botón *Create folder*), pero también podemos copiar-pegar los elementos ya existentes en nuestra PC hacia la carpeta de trabajo.\n\n### Creando un proyecto de RStudio\n\nLo siguiente NO es obligatorio, pero sí muy útil, sobre todo cuando se trabaja con RStudio y es crear un proyecto de RStudio. Para ello, iremos a *File* y luego a *New Project*.\n\n![](images/clipboard-334464964.png)\n\nLuego, en la ventana que nos aparece, daremos click a *Existing directory*, luego a *Browse* y daremos click a la carpeta que hemos definido como nuestro directorio de trabajo (en nuestro caso, *mgpu-examples/*). Luego, *Aceptar* y finalmente en el botón *Create Project*. Rstudio parpadeará un poco y luego nos mostrará la misma ventana, pero dentro del proyecto establecido. La manera más sencilla de comprobar que el proyecto se ha creado en la carpeta correcta (*mgpu-examples/* en nuestro caso) es verificando que justo en el panel de Console, a la derecha de la versión de R, aparezca únicamente la ruta de nuestra carpeta principal (y no alguna de las subcarpetas, e.g. *mgpu-examples/code/* o *mgpu-examples/inputs/*).\n\n![](images/clipboard-3123546063.png)\n\n::: {.callout-caution title=\"Antes de decir `hello`\"}\n`marbec-gpu` incorpora la posibilidad de trabajar con RStudio (Server); sin embargo, esta interfaz deberá utilizarse ÚNICAMENTE para PREPARAR nuestros scripts antes de ser ejecutados utilizando toda la potencia de nuestro server. En otras palabras, dentro del entorno de RStudio podremos cargar archivos no tan grandes y realizar operaciones básicas, pero en ningún momento debemos ejecutar un proceso complejo (pesado) desde ahí, sino desde **Terminal**.\n:::\n\n## `Hello world!` (ejemplos sencillos)\n\n### Ejemplo 1-1\n\nIniciaremos con lo más sencillo: crear un script en R e imprimir el (famosísimo) mensaje \"Hello world!\".\n\n* Empezaremos abriendo una sesión de RStudio a partir del entorno JupyterLab (si desseas conocer cómo llegar hasta ahí, revisa el [post](https://luislaum.github.io/blog/marbec-gpu-run-process/marbec-gpu-run-process.html) de Introducción a `marbec-gpu`).\n\n* Una vez dentro del entorno RStudio, crearemos un nuevo script (*File -> New file -> R script*) el cual contendrá una única línea:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello world and hello marbec-gpu!\")\n```\n:::\n\n\n* Luego, guardaremos ese script con el nombre *code/ex1-1.R* (*code/* hace referencia a una subcarpeta creada anteriormente dentro del *working directory* de nuestro proyecto en RStudio).\n\n* Ahora viene lo interesante, dentro de nuestro navegador, debemos volver a la pestaña de Launcher y abrir una ventana de **Terminal** (dando click al ícono correspondiente).\n\n* Por defecto, Terminal abrirá una sesión en la carpeta local asignada a nuestro usuario. Desde ahí, debemos llegar a la carpeta que hemos establecido como *working directory*; es decir, la carpeta que nuestro script reconocerá como directorio de trabajo (ya sea que hayamos decidido usar RStudio o no para crearla o crear un proyecto dentro de ella). Asumiendo que nuestro working directory es la carpeta `mgpu-examples/`, debemos llegar a ella utilizando el comando `cd`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ncd mgpu-examples/\n```\n:::\n\n\n::: {.callout-tip title=\"¿cómo saber que hemos llegado a la carpeta correcta?\"}\nEn primer lugar, el prompt indicará el nombre de la carpeta en la que se encuentra.\n\n![](images/clipboard-3123546064.png)\n\nAdemás, podemos ejecutar el comando `ls` con el que se mostrará las subcarpetas y archivos dentro de la carpeta a donde hemos llegado. Si todo coincide, pues lo hicimos bien.\n\n![](images/clipboard-3123546065.png)\n:::\n\n* A continuación, ejecutaremos en la Terminal la siguiente orden: `Rscript code/ex1-1.R` y el resultado deberá ser que justo lo que se nos mostraría en una sesión habitual de R.\n\n![](images/clipboard-3123546066.png)\n\n\n\n### Ejemplo 1-2\n\nEn este siguiente ejemplo, mostraremos un script que genera y guarda archivos en nuestro *working directory* en donde previamente, crearemos dos carpetas nuevas (**figures/** y **outputs/**) a través del comando `mkdir` del siguiente modo:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nmkdir figures/ outputs/\n```\n:::\n\n\n\n::: {.callout-note}\nDentro del entorno de Terminal, no es posible observar gráficos de forma interactiva (como en RStudio), por lo que si se desea conservar cualquier figura, se deberá incluir siempre el código para guardarla dentro del script que ejecutemos. Dependiendo del entorno gráfico, podemos usar funciones como `png`, `bmp`, `jpeg`, `pdf` (para entorno **graphics**), o `ggsave` (para entorno **ggplot2**).\n:::\n\n* Ahora, vamos a RStudio para crear el siguiente script y a guardarlo en **code/ex1-2.R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print mtcars\nprint(mtcars)\n\n# Export mtcars as a csv\nwrite.csv(x = mtcars, file = \"outputs/mtcars.csv\")\n \n# Create and save a scatterplot\npng(filename = \"figures/fig_1-1.png\")\n\nplot(x = mtcars$mpg, y = mtcars$disp, \n     xlab = \"Miles per (US) gallon\", ylab = \"Displacement (cu.in.)\")\n\ndev.off()\n```\n:::\n\n\n* Seguidamente, volvemos al entorno de Terminal y ejecutaremos nuestro nuevo script con el comando `Rscript code/ex1-2.R`. Inmediatamente, se mostrará la tabla de `mtcars` ya que eso es lo que ordena la primera línea de nuestro script. \n\n![](images/clipboard-3123546067.png)\n\n* Sin embargo, si ejecutamos en Terminal el comando `ls` para las carpetas *figures/* y *outputs/*, veremos que aparecen los dos archivos que ordenamos crear dentro de nuestro script.\n\n![](images/clipboard-3123546068.png)\n\n* Si los archivos creados son los que esperamos recolectar de nuestro análisis, podemos descargarlos a través de Filezilla (ver el [post](https://luislaum.github.io/blog/marbec-data-manage-files/marbec-data-manage-files.html) correspondiente).\n\n::: {.callout-tip title=\"Previsualizar figuras\"}\nSi bien no es posible obtener una previsualización de figuras en Terminal o JupyterLab ya que estos no cuentan con un visor de imágenes, sí es posible hacerlo desde el entorno web de `marbec-data`. No obstante, se trata de un visor básico y solo disponible para los tipos de archivos más comunes.\n:::\n\n\n## `Hello universe!` (procesos en paralelo)\n\n### Ejemplo 2-1: Un bucle en un solo núcleo\n\n* Empezaremos creando un script (que guardaremos como *code/ex2-1.R*) que contenga un bucle sencillo que genere 20 matrices de 100x100 con valores aleatorios y las guarde en archivos csv distintos dentro de la carpeta *outputs/ex2-rndmats/* (recuerda que debes crear previamente esa carpeta usando `mkdir`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting number of rows and columns\nrow_n <- 100\ncol_n <- 100\n\nfor(i in seq(20)){\n  # Create random matrix\n  rndMat <- matrix(data = runif(n = row_n*col_n), nrow = row_n, ncol = col_n)\n  \n  # Save matrix\n  write.csv(x = rndMat, \n            file = sprintf(fmt = \"outputs/ex2-rndmats/mat_%02d.csv\", i), \n            row.names = FALSE)\n  \n  # Print a message at the end of each step\n  cat(sprintf(fmt = \"Matrix %02d finished!\\n\", i))\n}\n```\n:::\n\n\n* Ahora, ejecutaremos nuestro script en Terminal (con el comando `Rscript code/ex2-1.R`) y observaremos que todo ha ido bien si los mensajes al final de cada paso del bucle se muestran correctamente y si además al ejecutar el comando `ls` sobre la carpeta objetivo vemos los archivos creados:\n\n![](images/clipboard-3123546069.png)\n\n::: {.callout-tip title=\"Siempre correr un ejemplo pequeño primero\"}\nYa en una ejecución real, lo recomendable es siempre intentar con un ejemplo pequeño que nos permita corroborar que nuestro script va bien ANTES de poner toda la carne en el asador tratando de ejecutar el proceso pesado. Además, si nuestro script devuelve figuras o archivos, ejecutar un script pequeño de corroboración nos permite revisar rápidamente si los archivos generados con coherentes con lo que esperamos obtener. \n:::\n\n\n### Ejemplo 2-2: Un bucle en múltiples núcleos\n\n* Partiendo del ejemplo anterior, convertiremos nuestro script en uno que ejecute los procesos de forma paralela. Para ello aprovecharemos las herramientas de los paquetes [foreach](https://cran.r-project.org/package=foreach) y [doParallel](https://cran.r-project.org/package=doParallel). Nótese que los nombres de los archivos de este script empezarán con las letras `mc_` para poder reconocerlos respecto a los obtenidos en el ejemplo anterior:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting number of rows and columns\nrow_n <- 100\ncol_n <- 100\n\nrequire(foreach)\nrequire(doParallel)\n\n# Registering cluster\ncl <- makeCluster(spec = 20)\nregisterDoParallel(cl = cl)\n\n# Run multithread process\nout <- foreach(i = seq(20), .inorder = FALSE) %dopar% {\n# Create random matrix\n  rndMat <- matrix(data = runif(n = row_n*col_n), nrow = row_n, ncol = col_n)\n  \n  # Save matrix\n  write.csv(x = rndMat, \n            file = sprintf(fmt = \"outputs/ex2-rndmats/mc_mat_%02d.csv\", i), \n            row.names = FALSE)\n  \n  NULL\n}\n\n# Finish cluster\nstopCluster(cl)\n```\n:::\n\n\n\n* Ahora, ejecutaremos nuestro script en Terminal (con el comando `Rscript code/ex2-2.R`) y observaremos que todo ha ido bien si al ejecutar el comando `ls` sobre la carpeta objetivo vemos los archivos creados:\n\n![](images/clipboard-3123546070.png)\n\n:::{.callout-note}\nEs importante notar un par de cosas:\n\n* En el script del segundo ejemplo, `foreach` se encuentra asignado a un objeto (`out`) el cual recibirá el último objeto generado dentro de cada paso del loop. Si lo que se desea es únicamente obtener archivos que se exportarán (figuras, tablas, NetCDF, etc.), hay que asegurarse de dejar un `NULL` en la última línea dentro del bucle. Por otro lado, si lo que se desea es obtener un objeto y éste se coloca en esa posición, `foreach` lo compilará utilizando la función `list`, i.e. el objeto final (`out`) será una lista que tendrá tantos niveles como pasos haya en el bucle. Así mismo, es importante tener en cuenta que internamente `foreach` ejecuta una pequeña sesión de R aparte por lo que es necesario indicar los paquetes adicionales requeridos a través del argumento `.packages` (ver el ejemplo siguiente).\n\n* El argumento `spec = 20` dentro de `makeCluster` hace referencia a la cantidad de hilos de proceso que se utilizarán para ejecutar el bucle, ¿recuerdas que una de las opciones al momento de crear tu server en `marbec-gpu` era elegir la cantidad de CPUs (2, 4, 8, 16, 32...)? Bueno, pues es justamente con este argumento en donde indicarás esa cantidad de nucleos lógicos. Recuerda que otro aspecto importante es la RAM. En un momento determinado cada proceso corriendo dentro de cada hilo tendrá que cargar todo lo que necesitaría un solo proceso simple. Dicho de otro modo, si en un proceso de núcleo simple, en cada paso de nuestro bucle se tiene que cargar 5 archivos NetCDF que ocupan 5 GB en RAM, si ejecutamos ese proceso en multinúcleo y definimos `spec = 40`, en un momento se tendrán que cargar 5GBx40 (200 GB) en RAM en simultáneo. Así que no solo debes elegir bien la configuración de tu servidor (respecto al script que planeas ejecutar), sino también un aproximado de lo que se consume en cada proceso independiente, con el fin de no saturar tu servidor. `marbec-gpu` es grande, pero tiene sus límites.\n:::\n",
    "supporting": [
      "es_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}