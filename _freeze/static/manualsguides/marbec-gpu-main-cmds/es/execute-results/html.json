{
  "hash": "e5202a327bd9839f131743cca26ac842",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Principales comandos en <code>marbec-gpu</code>\"\nimage: images/banner.jpg\ndescription: |\n  Un listado rápido de los principales comandos para usar dentro de la Terminal de <code>marbec-gpu</code>.\ndate: 2024-10-23\nformat: \n  html:\n    toc: true\n    theme: \n      light: yeti\n      dark: solar\nfig-dpi: 1000\nengine: knitr\ndraft: false\ntags:\n  - guias\n  - marbec-gpu\n---\n\n\nCréditos de la imagen: Kajetan Sumila en [Unplash](https://unsplash.com/photos/black-metal-tools-on-brown-wooden-shelf-sXPR9JV270c?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash)\n\n\n# Principales comandos en Terminal de `marbec-gpu`\n\nLo primero que debemos tener en cuenta es que `marbec-gpu` lleva instalado Ubuntu, por lo que los comandos listados a continuación serán los mismos que se usan en dicho SO. En este artículo se mostrará una descripción de los principales modos de uso para cada comando, pero si usted tiene algún requerimiento adicional, siempre puede buscar en foros como Stackoverflow o revisar la ayuda de cada comando, que consiste en colocar el nombre del comando seguido de `--help`. Por ejemplo, si deseo conocer la ayuda del comando `ls`, bastará con ejecutar `ls --help` en la Terminal.\n\n::: {.callout-note title=\"Mayúsculas y minúsculas\"}\nAl igual que en R o Python, el uso de mayúsculas o minúsculas al momento de indicar una opción sí importa. Por ejemplo, `ls -D` no equivale a `ls -d`, por lo que se debe tener cuidado.\n:::\n\n### Navegar entre carpetas\n\n* Comando: `cd`\n* Modo de uso: `cd ruta/carpeta`\n\nPara indicar que se desea ir a una posición (carpeta) anterior, se utilizará el *statement* `..` de la siguiente manera: `../ruta/carpeta1` (esto indica que a partir de la carpeta en donde nos encontramos, en la carpeta anterior hay una carpeta llamada `ruta` que a su vez tiene una llamada `carpeta1`).\n\n### Crear una carpeta\n\n* Comando: `mkdir`\n* Modo de uso: `mkdir ruta/carpeta`\n\n### Generar un listado de archivos\n\n* Comando: `ls`\n* Modo de uso: `ls ruta/folder`\n\nPrincipales opciones:\n\n* `--all` (o `-a`): Muestra todos los archivos y subcarpetas, incluyendo aquellos protegidos (ocultos) por el sistema.\n\n### Generar un listado de archivos/carpetas mostrando el tamaño de cada elemento\n\n* Comando: `du`\n* Modo de uso: `du ruta/archivo-folder.csv`\n\nPrincipales opciones:\n\n* `--human-readable` (o `-h`): cambia las unidades dinámicamente para evitar mostrar todo Kb. Esto es especialmente útil cuando se tiene objetos (subcarpetas o archivos) de gran tamaño.\n\n* `--summary` (o `-s`): muestra una tabla resumida, i.e. solo incluye las subcarpetas y archivos presentes en el primer nivel de búsqueda. Esto es útil cuando solo queremos echar un vistazo rápido y evitar que muestre un listado completo de TODAS las subcarpetas internas. \n\nSi deseo obtener un listado de todos los archivos y carpetas dentro de un folder con sus respectivos tamaños (las tres opciones son equivalentes):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu ruta/de/folder/* --human-readable --summarize\ndu ruta/de/folder/* -h -s\ndu ruta/de/folder/* -hs\n```\n:::\n\n\n### Copiar-pegar\n\nPara esto, la manera más sencilla es a través del comando `cp` y haciendo uso de los comandos de navegación citados en este post (e.g. `..` para indicar una carpeta anterior). La sintaxis básica es la siguiente: `cp ruta/de/origen ruta/de/destino`, pero existen diferentes casos posibles:\n\n* Copiar un archivo dentro de la misma carpeta, pero con un nombre distinto (crear duplicado): `cp archivo1.csv archivo1-dup.csv`\n\n* Copiar un archivo hacia otra carpeta: `cp ruta/de/archivo1.csv carpeta/de/destino`\n\n* Copiar más de un archivo hacia otra carpeta: `cp ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino`\n\n* Copiar una carpeta en otra carpeta: `cp ruta/de/carpeta1 ruta/de/carpeta2 --recursive` o `cp ruta/de/carpeta1 ruta/de/carpeta2 -r`\n\n:::{.callout-note}\nPor defecto, `cp` sobreescribirá cualquier archivo con el mismo nombre. Para evitarlo, es posible añadir la opción `-n` del siguiente modo: `cp ruta/de/archivo1.csv ruta/de/destino -n`\n:::\n\n### Cortar-pegar (y también renombrar)\n\nSerá muy similar a lo anterior, pero a través del comando `mv`:\n\n* Renombrar un archivo (dentro de la misma carpeta): `mv archivo1.csv archivo2.csv`\n\n* Mover un archivo hacia otra carpeta: `mv ruta/de/archivo1.csv carpeta/de/destino`\n\n* Mover más de un archivo hacia otra carpeta: `mv ruta/de/archivo1.csv ruta/de/archivo2.csv carpeta/de/destino`\n\n* Mover una carpeta hacia otra carpeta: `mv ruta/antigua/carpeta ruta/nueva/carpeta` \n\n\n### Borrar\n\nPara esto, utilizaremos el comando `rm` de la siguiente manera:\n\n* Borrar un archivo: `rm ruta/de/archivo.csv`\n\n* Borrar una carpeta (y todo su contenido): `rm ruta/de/carpeta -r`\n\n:::{.callout-caution title=\"No hay vuelta atrás\"}\nSi bien dentro de Terminal siempre es posible cancelar una orden usando el atajo `Ctrl+C` (o `Cmd+C` en MacOS), una vez que se ejecuta el comando `rm` y éste culmina su trabajo, **no hay manera de revertir lo borrado** ni recuperarlo desde alguna papelera de reciclaje, así que ten mucho cuidado al usarlo.\n:::\n\n### Visualizar procesos en curso\n\n* Comando: `top`\n\nAl ejecutarlo, se mostrará en modo interactivo en Terminal los procesos que se están ejecutando, así como los recursos utilizados por cada uno de ellos (básicamente como un Administrador de tareas). Para salir de este modo interactivo, basta con pulsar la tecla `q`.\n\n### Detener la ejecución de un proceso\n\nSi queremos forzar el cierre o la cancelación de un proceso ya iniciado, podemos utilizar el atajo `Ctrl+C` (o `Cmd+C` en MacOS). Es importante tener en cuenta que forzar el cierre de un proceso que tenía en marcha el manejo de archivos o carpetas (creación, copia, etc.) puede dejar inutilizables los archivos generados.\n\n### Visualizar un archivo de texto plano\n\nPor defecto, desde Terminal existen dos herramientas disponibles: `vi` y `nano`. La sintaxis para su ejecución es tan sencilla como `vi ruta/archivo1.txt` o `nano ruta/archivo1.txt`, en donde `archivo1.txt` puede ser cualquier archivo de texto plano (e.g. un script en R o Python). Los atajos de navegación dentro de cada uno de esos entornos sí son distintos, pero la documentación es muy abundante en Internet. Elige el que te agrade más.\n",
    "supporting": [
      "es_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}