{
  "hash": "62e559a62aca6ec0a877d017ad172522",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Main commands in <code>marbec-gpu</code> Terminal\"\ndescription: |\n  A quick list of the main commands to use within the <code>marbec-gpu</code> Terminal.\ndate: 2024-10-23\nformat: \n  html:\n    toc: true\n    theme: \n      light: yeti\n      dark: solar\nfig-dpi: 1000\nengine: knitr\ndraft: false\n---\n\n\n![](images/banner.jpg){width=100%}\n\nImage credits: Kajetan Sumila at [Unplash](https://unsplash.com/photos/black-metal-tools-on-brown-wooden-shelf-sXPR9JV270c?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash)\n\n# Main commands in `marbec-gpu` Terminal\n\nThe first thing to keep in mind is that `marbec-gpu` has Ubuntu installed, so the commands listed below will be the same as the ones used in that OS. This article will show a description of the main usage modes for each command, but if you have any additional requirements, you can always search in forums like [Stackoverflow](https://stackoverflow.com/) or check the help for each command, which consists of placing the command name followed by `--help`. For example, if I want to know the help for the `ls` command, just run `ls --help` in the Terminal.\n\n::: {.callout-note title=\"Upper and lower case\"}\nAs in R or Python, the use of upper or lower case when indicating an option does matter. For example, `ls -D` is not equivalent to `ls -d`, so be carefull.\n:::\n\n### Browsing within folders\n\n* Command: `cd`\n* Usage: `cd path/folder`\n\nTo indicate a previous position (folder), you will use the *statement* `..` as follows: `../path/folder1` (this indicates that there is a folder called `path` from the folder where you are, and that that has a folder called `folder1` as well).\n\n### Create a folder\n\n* Command: `mkdir`\n* Usage: `mkdir path/folder`\n\n### Get the content of a folder as a list\n\n* Command: `ls`\n* Usage: `ls path/folder/`\n\nMain options:\n\n* `--all` (o `-a`): Displays all files and subfolders, including those protected (hidden) by the system.\n\n### Generate a list of files/folders and display the size of each item\n\n* Command: `du`\n* Usage: `du path/to/file.csv` o `du path/to/folder`\n\nMain options:\n\n* `--human-readable` (o `-h`): changes the units dynamically to avoid displaying all Kb. This is especially useful when you have large objects (subfolders or files).\n\n* `--summary` (o `-s`): displays a summary table, i.e. it only includes the subfolders and files present at the first search level. This is useful when we just want to take a quick look and avoid displaying a complete listing of ALL internal subfolders. \n\nIf I want to get a list of all the files and folders inside a folder with their respective sizes (the three options are equivalent):\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ndu ruta/de/folder/* --human-readable --summarize\ndu ruta/de/folder/* -h -s\ndu ruta/de/folder/* -hs\n```\n:::\n\n\n### Copy-paste\n\nFor this, the simplest way is through the `cp` command and making use of the navigation commands cited in this post (e.g. `..` to indicate a previous folder). The basic syntax is the following: `cp path/origin /path/destination`, but there are different possible cases:\n\n* Copy a file into the same folder, but with a different name (create duplicate): `cp file1.csv file1-dup.csv`.\n\n* Copy a file to another folder: `cp path/file1.csv path/destination`.\n\n* Copy more than one file to another folder: `cp path/file1.csv path/file2.csv folder/destination` \n\n* Copy a folder to another folder: `cp path/folder1 path/folder2 --recursive` or `cp path/folder1 path/folder2 -r`.\n\n:::{.callout-note}\nBy default, `cp` will overwrite any file with the same name. To avoid this, it is possible to add the `-n` option as follows: `cp path/from/file1.csv path/destination -n`.\n:::\n\n### Cut-paste (and also rename)\n\nIt will be very similar to the above, but through the `mv` command:\n\n* Rename a file (within the same folder): `mv file1.csv file2.csv`\n\n* Move a file to another folder: `mv path/file1.csv path/to/destination`\n\n* Move one file to another folder: `mv path/file1.csv path/file2.csv path/destination`\n\n* Move one folder to another folder: `mv path/old/folder path/new/folder`\n\n\n### Delete\n\nFor this, we will use the `rm` command as follows:\n\n* Delete a file: `rm path/to/file.csv` \n\n* Delete a folder (and all its contents): `rm path/to/folder -r`\n\n:::{.callout-caution title=\"No turning back\"}\nWhile inside Terminal it is always possible to cancel a command using the shortcut `Ctrl+C` (or `Cmd+C` on MacOS), once the `rm` command completes its work, **there is no way to revert the deletion** or recover it from a recycle garbage can, so be very careful when using it.\n:::\n\n### Display current processes\n\n* Command: `top`\n\nWhen you run it, it will show in interactive mode in Terminal the processes that are running, as well as the resources used by each of them (basically like a Task Manager). To exit this interactive mode, just press the `q` key.\n\n### Stop a process\n\nIf we want to force the closing or the cancellation of a process already started, we can use the shortcut `Ctrl+C` (or `Cmd+C` in MacOS). It is important to keep in mind that forcing the closing of a process that had in progress the handling of files or folders (creation, copy, etc.) can leave the generated files unusable.\n\n### Viewing a plain text file\n\nBy default, there are two tools available from Terminal: `vi` and `nano`. The syntax for their execution is as simple as `vi path/file1.txt` or `nano path/file1.txt`, where `file1.txt` can be any plain text file (e.g. an R or Python script). The navigation shortcuts within each of these environments are different, but documentation is abundant on the Internet. Choose the one you like best.\n\n",
    "supporting": [
      "en_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}